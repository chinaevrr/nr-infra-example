name: Infrastructure apply stack
run-name: 'Apply  stack: ${{ inputs.working-directory }} for ${{ inputs.environment }}@${{ inputs.aws-region }} from ${{ github.ref }} by ${{ github.actor}}'
on:
  workflow_call:
    inputs:
      working-directory:
        type: string

      aws-region:
        type: string

      environment:
        type: string

  workflow_dispatch:
    inputs:
      working-directory:
        required: true
        type: choice
        options:
          - infrastructure/module-1

      aws-region:
        required: true
        type: choice
        options: [ us-east-1, eu-west-1 ]

      environment:
        required: true
        type: choice
        options: [ LAB, DEV, QA, PPE, PROD ]
env:
  ASSET_ID: assetId
  CICD_AWS_REGION: us-east-1
jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      exitcode: ${{ steps.plan.outputs.exitcode }}
      github-protected-env: ${{ steps.prep-env.outputs.GITHUB_PROTECTED_ENV }}
      tg-env: ${{ steps.prep-env.outputs.TG_ENV }}
    steps:
      - name: Prepare environment variables
        id: prep-env
        shell: pwsh
        run: |
          $REGION_MAP = @{ 'us-east-1'='us'; 'eu-west-1'='ie' }
          $APPROVE_ENV_MAP = @{ 'LAB' = 'PREPROD'; 'DEV' = 'PREPROD'; 'QA' = 'PREPROD'; 'PPE' = 'PROD'; 'PROD' = 'PROD' }
          
          $TG_ENV = ConvertTo-Json @{
            # example: assetId-us-lab
            ENV = "$env:ASSET_ID-$( $REGION_MAP['${{ inputs.aws_region }}']  )-$( '${{ inputs.environment }}'.toLower() )" 
          } -Compress
          
          echo "GITHUB_PROTECTED_ENV=$( $APPROVE_ENV_MAP['${{ inputs.environment }}'] )" | Out-File -Path $env:GITHUB_OUTPUT -Append -Encoding Utf8
          echo "TG_ENV=$TG_ENV" | Out-File -Path $env:GITHUB_OUTPUT -Append -Encoding Utf8
          echo "PLAN_PATH=$( "${{ inputs.working-directory }}/plan.out" -replace "/", "-" )" | Out-File -Path $env:GITHUB_OUTPUT -Append -Encoding Utf8

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: 0.42.5
      - uses: mdgreenwald/mozilla-sops-action@v1.4.0

      - name: Configure CICD AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.CICD_AWS_REGION }}

      - name: Decrypt files
        shell: pwsh
        working-directory: ./infrastructure
        run: |
          Get-ChildItem -Filter *.enc.json -Recurse | %{ sops -d $_.FullName > ( $_.FullName -replace ".enc.json$", ".json" ) }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.approve_environment == 'PREPROD' && secrets.PREPROD_AWS_ACCESS_KEY_ID || secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.approve_environment == 'PREPROD' && secrets.PREPROD_AWS_SECRET_ACCESS_KEY || secrets.PROD_AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ inputs.aws-region }}

      - name: Terragrunt plan
        id: plan
        env: ${{ fromJson(steps.prep-env.outputs.TG_ENV) }}
        working-directory: ${{ inputs.working-directory }}
        run: terragrunt plan  -detailed-exitcode -out=plan.out -input=false

      - name: Terragrunt show plan
        env: ${{ fromJson(steps.prep-env.outputs.TG_ENV) }}
        if: success() && ${{ steps.plan.outputs.exitcode == 2 }}
        working-directory: ${{ inputs.working-directory }}
        shell: pwsh
        run: |
          terragrunt show plan.out
          $plan = terragrunt show -no-color plan.out
          @"
          + __Module path__: *${{ inputs.working-directory }}*
          + __Environment__: *${{ inputs.environment }}*
          + __Region__: *${{ inputs.aws-region }}*
          + __Git reference__: *${{ github.ref }}*
          
          ``````diff
          $((terraform show -no-color plan.out | ?{$_ -notlike '[command]/home/runner/*' -and $_ -notlike '::debug::*'}) -join "`n")   
          ``````
          "@ | Out-File -Path $env:GITHUB_STEP_SUMMARY -Append -Encoding Utf8

      - uses: actions/upload-artifact@v2
        if: success() && ${{ steps.plan.outputs.exitcode == 2 }}
        with:
          name: ${{ steps.prep-env.outputs.PLAN_PATH }}
          path: ${{ inputs.working-directory }}/plan.out
  apply:
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ needs.plan.outputs.exitcode == 2 }}
    environment: ${{ needs.plan.outputs.github-protected-env }}
    steps:
      - name: Prepare environment variables
        id: prep-env
        shell: pwsh
        run: |
          $REGION_MAP = @{ 'us-east-1'='us'; 'eu-west-1'='ie' }
          $APPROVE_ENV_MAP = @{ 'LAB' = 'PREPROD'; 'DEV' = 'PREPROD'; 'QA' = 'PREPROD'; 'PPE' = 'PROD'; 'PROD' = 'PROD' }
          
          $TG_ENV = ConvertTo-Json @{
            # example: assetId-us-lab
            ENV = "$env:ASSET_ID-$( $REGION_MAP['${{ inputs.aws_region }}']  )-$( '${{ inputs.environment }}'.toLower() )"
          } -Compress
          
          echo "GITHUB_PROTECTED_ENV=$( $APPROVE_ENV_MAP['${{ inputs.environment }}'] )" | Out-File -Path $env:GITHUB_OUTPUT -Append -Encoding Utf8
          echo "TG_ENV=$TG_ENV" | Out-File -Path $env:GITHUB_OUTPUT -Append -Encoding Utf8

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2

      - name: Setup terragrunt
        uses: autero1/action-terragrunt@v1.2.0
        with:
          terragrunt_version: 0.42.5
      - uses: mdgreenwald/mozilla-sops-action@v1.4.0

      - name: Configure CICD AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CICD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.CICD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.CICD_AWS_REGION }}

      - name: Decrypt files
        shell: pwsh
        working-directory: ./infrastructure
        run: |
          Get-ChildItem -Filter *.enc.json -Recurse | %{ sops -d $_.FullName > ( $_.FullName -replace ".enc.json$", ".json" ) }

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.approve_environment == 'PREPROD' && secrets.PREPROD_AWS_ACCESS_KEY_ID || secrets.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.approve_environment == 'PREPROD' && secrets.PREPROD_AWS_SECRET_ACCESS_KEY || secrets.PROD_AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ inputs.aws-region }}

      - uses: actions/download-artifact@v2
        env: ${{ fromJson(steps.prep-env.outputs.TG_ENV) }}
        with:
          name: ${{ steps.prep-env.outputs.PLAN_PATH }}
          path: ${{ inputs.working-directory }}

      - name: Terragrunt apply
        env: ${{ fromJson(steps.prep-env.outputs.TG_ENV) }}
        working-directory: ${{ inputs.working-directory }}
        run: terragrunt apply plan.out
